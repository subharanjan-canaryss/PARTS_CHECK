name: PartsUnlimited.Web.Release

on:
  
  workflow_dispatch:
  push: 
    tags:
      - ' [0-9]+.[0-9]+'

env:
  SLN_FILE: PartsUnlimited.sln
  WEB_APP_NAME: partsplayground
  PACKAGE_TEMP_PATH: Content\D_C\a\PartsUnlimited\PartsUnlimited\src\PartsUnlimitedWebsite\obj\Release\Package\PackageTmp

jobs:
  
  Build:
    runs-on: windows-latest
    name: ‚õèÔ∏è Build Web App
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
   
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
      
    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1
      
    - name: NuGet restore
      run: nuget restore
        
    - name: Build App
      run: |
       # msbuild ${{env.SLN_FILE}} /p:TransformWebConfigEnabled=False /p:AutoParameterizationWebConfigConnectionStrings=False /p:Configuration=Release /p:Platform='Any CPU' /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true 
         msbuild ${{env.SLN_FILE}} /p:TransformWebConfigEnabled=False /p:AutoParameterizationWebConfigConnectionStrings=False /p:Configuration=Release /p:Platform='Any CPU' /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="${{github.workspace}}\stagingdir"

    - name: Run Unit Test
      run: vstest.console.exe /Platform:x64 PartsUnlimited.UnitTests.dll
      working-directory: ${{github.workspace}}\test\PartsUnlimited.UnitTests\bin\Release
    
    - name: Copy Selenium Tests
      shell: pwsh
      #working-directory: ${{github.workspace}}/stagingdir
      run: |
       new-item -Path ${{github.workspace}}\stagingdir -Name "TestAssemblies" -ItemType "directory"
       copy-item -Path ${{github.workspace}}\test\PartsUnlimited.SeleniumTests\bin\Release\* -Destination .\TestAssemblies -Recurse
    
    - name: Publish Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: partsunlimited
        path: ${{github.workspace}}\stagingdir
    
    - name: Publish Test artifact
      uses: actions/upload-artifact@v2
      with:
        name: partsunlimited-unit-tests
        path: ${{github.workspace}}\test\PartsUnlimited.UnitTests\bin\Release
    
  Test:
      name: üß™ Run Unit Tests
      runs-on: windows-latest
      needs: [ Build ]
      steps:
      
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1

      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: partsunlimited-unit-tests
          path: Unit-Tests
      
      - name: Run Unit Test
        run: vstest.console.exe /Platform:x64 PartsUnlimited.UnitTests.dll
        working-directory: Unit-Tests
  
  CodeQL:
      name: ‚≠ïÔ∏è Security Scanning  
      runs-on: windows-latest
      permissions:
       actions: read
       contents: read
       security-events: write
       
      needs: [ Build, Test ]
      strategy:
       fail-fast: false
       matrix:
        language: [ 'csharp', 'javascript' ]
        
      steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
          
#       - name: Autobuild
#         uses: github/codeql-action/autobuild@v1
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
        
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5

      - name: NuGet restore
        run: nuget restore

      - name: Build C# Project
        run: |
           msbuild ${{env.SLN_FILE}} /p:UseSharedCompilation=false /p:TransformWebConfigEnabled=False /p:AutoParameterizationWebConfigConnectionStrings=False /p:Configuration=Release /p:Platform='Any CPU'
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  Sonar-Analysis:
    name: üîÜ Sonar Qube Analysis
    runs-on: ubuntu-latest
    needs: [ Build, Test ]
    
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#   Lint:
#     name: üëÄ Lint Code Base
#     runs-on: ubuntu-latest
#     needs: [ Build, Test ]
    
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v2
#         with:
#           # Full git history is needed to get a proper list of changed files within `super-linter`
#           fetch-depth: 0

#       - name: Lint Code Base
#         uses: github/super-linter@v3
#         env:
#           VALIDATE_ALL_CODEBASE: true
#           DEFAULT_BRANCH: master
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
  release:
    needs: [Build,Test,CodeQL,Sonar-Analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{steps.build_changelog.outputs.changelog}}
          draft: false
          prerelease: false
  
